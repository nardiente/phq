# Layout & Interaction Rules

rule: Avoid unnecessary wrapper divs
explanation: Extra DOM elements often cause unexpected behavior like blocked clicks
example: Don't add full-screen overlays unless explicitly needed for modals

rule: Question every absolute positioning
explanation: Absolute positioning often leads to z-index wars and click/interaction issues
example: Use standard flow where possible, absolute positioning only when required

rule: Keep DOM hierarchy shallow
bad_example: <div><div><div><button /></div></div></div>
good_example: <button />
explanation: Deep nesting makes tracking interaction issues much harder

# Debugging Rules

rule: When interactions break, check DOM structure first
explanation: Most click/hover issues come from invisible overlays or incorrect event bubbling

rule: Log state changes at the source
explanation: Put console.logs where state actually changes, not in effect hooks or renders 

# STOP THESE PATTERNS IMMEDIATELY

ðŸš¨ DO NOT:
- Add abstractions "just in case"
- Create interfaces you don't need now
- Add state management before it's required
- Make components reusable before they need to be
- Add complexity for future use cases

âœ… DO:
- Write the simplest code that works
- Copy-paste is better than wrong abstraction
- Keep all code in one file until you MUST split it
- Use direct DOM manipulation instead of state when possible

# Examples

BAD:
- Creating a ColorPicker component for one color field
- Adding Redux for one piece of state
- Making everything a TypeScript interface

GOOD:
- Single input field with color value
- Local state with useState
- Plain objects instead of interfaces

# When Fixing Bugs
1. Check the simplest explanation first
2. Look for extra divs and CSS causing issues
3. Remove complexity before adding new code

# Code Review Rules
- If code looks clever, reject it
- If there's a simpler way, use it
- NO "what if we need X later" 